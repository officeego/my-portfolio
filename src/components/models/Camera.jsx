/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

const Camera = React.memo(function Camera(props) {
  // Use React.memo for performance optimization
  const { nodes, materials } = useGLTF("/models/CameraGLB.glb");

  const modelRef = useRef();

  useFrame((state) => {
    modelRef.current.position.y =
      -1.5 + Math.sin(state.clock.elapsedTime) * 0.15;
  });

  return (
    <group
      {...props}
      dispose={null}
      ref={modelRef}
      position={[0, -1.5, 0]}
    //   scale={[0.06, 0.06, 0.06]}
      scale={[1.2, 1.2, 1.2]}
      rotation={[0.9, 0.9, 0.7]}
    //   rotation={[0.25, 1.6, 1.3]}
    >
      <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.camera_body}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.camera_body_2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.rings}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.strap}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.handle}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials.camera_lens}
        />
      
    </group>
  );
});

export default Camera;
useGLTF.preload("/models/CameraGLB.glb");
